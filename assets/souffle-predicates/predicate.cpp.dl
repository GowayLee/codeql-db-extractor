// Souffl√© datalog file generated from CSV files
// Auto-generated by csv-to-souffle.py

.decl derspecifiers(der_id: symbol, spec_id: symbol)


.decl xmldtds(id: symbol, root: symbol, publicid: symbol, systemid: symbol, fileid: symbol)


.decl namespace_inline(id: symbol)


.decl type_decls(id: number, type_id: number, location: number)


.decl containerparent(parent: number, child: number)


.decl param_decl_bind(id: number, index: number, fun_decl: number)


.decl variable_template_argument(variable_id: symbol, index: symbol, arg_type: symbol)


.decl xmlchars(id: symbol, text: symbol, parentid: symbol, idx: symbol, iscdata: symbol, fileid: symbol)


.decl ptrtomembers(id: symbol, type_id: symbol, class_id: symbol)


.decl stmt_decl_entry_bind(stmt: number, num: number, decl_entry: number)


.decl derivations(derivation: symbol, sub: symbol, index: symbol, super_: symbol, location: symbol)


.decl files(id: number, name: symbol)


.decl expr_cond_false(cond: symbol, false_: symbol)


.decl compilation_finished(id: number, cpu_seconds: float, elapsed_seconds: float)


.decl expr_allocator(expr: symbol, func: symbol, form: symbol)


.decl while_body(while_stmt: symbol, body_id: symbol)


.decl autoderivation(var: symbol, derivation_type: symbol)


.decl fun_specialized(id: symbol)


.decl iscall(caller: number, kind: number)


.decl xmlattrs(id: symbol, elementid: symbol, name: symbol, value: symbol, idx: symbol, fileid: symbol)


.decl stmtattributes(stmt_id: symbol, spec_id: symbol)


.decl frienddecls(id: symbol, type_id: symbol, decl_id: symbol, location: symbol)


.decl concept_template_argument(concept_id: symbol, index: symbol, arg_type: symbol)


.decl var_decl_specifiers(id: symbol, name: symbol)


.decl stmtparents(id: number, index: number, parent: number)


.decl do_body(do_stmt: symbol, body_id: symbol)


.decl xmlencoding(id: symbol, encoding: symbol)


.decl fold(expr: symbol, operator: symbol, is_left_fold: symbol)


.decl is_pod_class(id: number)


.decl function_return_type(id: number, return_type: number)


.decl type_vla(type_id: symbol, decl: symbol)


.decl preproctext(id: symbol, head: symbol, body: symbol)


.decl preprocpair(begin: symbol, elseelifend: symbol)


.decl fun_requires(id: symbol, kind: symbol, constraint: symbol)


.decl variable_instantiation(to: symbol, from_: symbol)


.decl routinetypes(id: number, return_type: number)


.decl ishandler(block: symbol)


.decl is_function_template(id: symbol)


.decl macro_argument_unexpanded(invocation: symbol, argument_index: symbol, text: symbol)


.decl enclosingfunction(child: symbol, parent: symbol)


.decl diagnostics(id: symbol, severity: symbol, error_tag: symbol, error_message: symbol, full_error_message: symbol, location: symbol)


.decl unspecifiedtype(type_id: number, unspecified_type_id: number)


.decl class_instantiation(to: symbol, from_: symbol)


.decl typeattributes(type_id: symbol, spec_id: symbol)


.decl expr_cond_true(cond: symbol, true_: symbol)


.decl arraysizes(id: symbol, num_elements: symbol, bytesize: symbol, alignment: symbol)


.decl namequalifiers(id: symbol, qualifiableelement: symbol, qualifyingelement: symbol, location: symbol)


.decl type_operators(id: symbol, arg_type: symbol, kind: symbol, base_type: symbol)


.decl xmlhasns(elementid: symbol, nsid: symbol, fileid: symbol)


.decl namespaces(id: number, name: symbol)


.decl expr_isload(expr_id: number)


.decl consteval_if_else(constexpr_if_stmt: symbol, else_id: symbol)


.decl is_variable_template(id: symbol)


.decl typedefbase(id: symbol, type_id: symbol)


.decl is_type_constraint(concept_id: symbol)


.decl for_initialization(for_stmt: number, init_id: number)


.decl xmlelements(id: symbol, name: symbol, parentid: symbol, idx: symbol, fileid: symbol)


.decl decltypes(id: symbol, expr: symbol, kind: symbol, base_type: symbol, parentheses_would_change_meaning: symbol)


.decl is_class_template(id: symbol)


.decl fun_decl_specifiers(id: symbol, name: symbol)


.decl includes(id: symbol, included: symbol)


.decl blockscope(block: number, enclosing: number)


.decl braced_initialisers(init: number)


.decl tupleelements(id: symbol, num_elements: symbol)


.decl usertype_uuid(id: symbol, uuid: symbol)


.decl type_decl_top(type_decl: number)


.decl concept_instantiation(to: symbol, from_: symbol)


.decl fileannotations(id: number, kind: number, name: symbol, value: number)


.decl compgenerated(id: number)


.decl funcattributes(func_id: symbol, spec_id: symbol)


.decl enumconstants(id: symbol, parent: symbol, index: symbol, type_id: symbol, name: symbol, location: symbol)


.decl attribute_arg_constant(arg: symbol, constant: symbol)


.decl virtual_base_offsets(sub: symbol, super_: symbol, offset: symbol)


.decl compilation_time(id: number, num: number, kind: number, seconds: float)


.decl funspecifiers(func_id: number, spec_id: number)


.decl comments(id: number, contents: symbol, location: number)


.decl aggregate_array_init(aggregate: symbol, initializer: symbol, element_index: symbol, position: symbol, is_designated: symbol)


.decl locations_default(id: number, file: number, beginline: number, begincolumn: number, endline: number, endcolumn: number)


.decl compilation_args(id: number, num: number, arg: symbol)


.decl function_prototyped(id: number)


.decl switch_initialization(switch_stmt: symbol, init_id: symbol)


.decl function_deleted(id: symbol)


.decl expr_cond_two_operand(cond: symbol)


.decl member_function_this_type(id: number, this_type: number)


.decl varbind(expr: number, var: number)


.decl if_then(if_stmt: number, then_id: number)


.decl nontype_template_parameters(id: symbol)


.decl function_template_argument_value(function_id: symbol, index: symbol, arg_value: symbol)


.decl constexpr_if_else(constexpr_if_stmt: symbol, else_id: symbol)


.decl affectedbymacroexpansion(id: symbol, inv: symbol)


.decl aggregate_field_init(aggregate: number, initializer: number, field: number, position: number, is_designated: symbol)


.decl fieldoffsets(id: number, byteoffset: number, bitoffset: number)


.decl extractor_version(codeql_version: symbol, frontend_version: float)


.decl new_allocated_type(expr: symbol, type_id: symbol)


.decl sizeof_bind(expr: symbol, type_id: symbol)


.decl varspecifiers(var_id: number, spec_id: number)


.decl type_requires(id: symbol, constraint: symbol)


.decl fun_decl_typedef_type(fun_decl: symbol, typedeftype_id: symbol)


.decl expr_reuse(reuse: symbol, original: symbol, value_category: symbol)


.decl consteval_if_then(constexpr_if_stmt: symbol, then_id: symbol)


.decl if_initialization(if_stmt: symbol, init_id: symbol)


.decl folders(id: number, name: symbol)


.decl function_defaulted(id: symbol)


.decl exprs(id: number, kind: number, location: number)


.decl coroutine_placeholder_variable(placeholder_variable: symbol, kind: symbol, function: symbol)


.decl xmlcomments(id: symbol, text: symbol, parentid: symbol, fileid: symbol)


.decl variable_vla(var: symbol, decl: symbol)


.decl constexpr_if_initialization(constexpr_if_stmt: symbol, init_id: symbol)


.decl globalvariables(id: symbol, type_id: symbol, name: symbol)


.decl stmt_decl_bind(stmt: number, num: number, decl: number)


.decl specialnamequalifyingelements(id: number, name: symbol)


.decl type_def(id: number)


.decl specifiers(id: number, str: symbol)


.decl class_template_argument(type_id: symbol, index: symbol, arg_type: symbol)


.decl namespaceattributes(namespace_id: symbol, spec_id: symbol)


.decl expr_ancestor(exp: symbol, ancestor: symbol)


.decl attribute_arg_value(arg: symbol, value: symbol)


.decl attribute_args(id: symbol, kind: symbol, attribute: symbol, index: symbol, location: symbol)


.decl numlines(element_id: number, num_lines: number, num_code: number, num_comment: number)


.decl uuidof_bind(expr: symbol, type_id: symbol)


.decl valuebind(val: number, expr: number)


.decl compound_requirement_is_noexcept(expr: symbol)


.decl usertypesize(id: number, size: number, alignment: number)


.decl compilation_compiling_files(id: number, num: number, file: number)


.decl fun_decl_noexcept(fun_decl: symbol, constant: symbol)


.decl usertype_alias_kind(id: symbol, alias_kind: symbol)


.decl jumpinfo(id: symbol, str: symbol, target: symbol)


.decl is_proxy_class_for(id: symbol, templ_param_id: symbol)


.decl preproctrue(branch: symbol)


.decl builtin_functions(id: symbol)


.decl preprocfalse(branch: symbol)


.decl varattributes(var_id: symbol, spec_id: symbol)


.decl class_template_argument_value(type_id: symbol, index: symbol, arg_value: symbol)


.decl orphaned_variables(var: symbol, function: symbol)


.decl typespecifiers(type_id: number, spec_id: number)


.decl xmllocations(xmlelement: symbol, location: symbol)


.decl var_requires(id: symbol, constraint: symbol)


.decl lambda_capture(id: symbol, lambda: symbol, index: symbol, field: symbol, captured_by_reference: symbol, is_implicit: symbol, location: symbol)


.decl attribute_arg_name(arg: symbol, name: symbol)


.decl fun_decls(id: number, function: number, type_id: number, name: symbol, location: number)


.decl static_asserts(id: symbol, condition: symbol, message: symbol, location: symbol, enclosing: symbol)


.decl stmts(id: number, kind: number, location: number)


.decl explicit_specifier_exprs(func_id: symbol, constant: symbol)


.decl namespacembrs(parentid: symbol, memberid: symbol)


.decl synthetic_destructor_call(element: symbol, i: symbol, destructor_call: symbol)


.decl new_array_allocated_type(expr: symbol, type_id: symbol)


.decl fun_implicit(id: symbol)


.decl function_instantiation(to: symbol, from_: symbol)


.decl attribute_arg_expr(arg: symbol, expr: symbol)


.decl type_template_type_constraint(id: symbol, constraint: symbol)


.decl macroparent(id: symbol, parent_id: symbol)


.decl direct_base_offsets(der_id: symbol, offset: symbol)


.decl fun_decl_empty_noexcept(fun_decl: symbol)


.decl funbind(expr: number, fun: number)


.decl var_decls(id: number, variable: number, type_id: number, name: symbol, location: number)


.decl link_targets(id: number, binary: number)


.decl membervariables(id: number, type_id: number, name: symbol)


.decl expr_deallocator(expr: symbol, func: symbol, form: symbol)


.decl code_block(block: symbol, routine: symbol)


.decl macro_argument_expanded(invocation: symbol, argument_index: symbol, text: symbol)


.decl localvariables(id: number, type_id: number, name: symbol)


.decl template_template_instantiation(to: symbol, from_: symbol)


.decl builtintypes(id: number, name: symbol, kind: number, size: number, sign: number, alignment: number)


.decl is_standard_layout_class(id: number)


.decl xmlns(id: symbol, prefixname: symbol, uri: symbol, fileid: symbol)


.decl commentbinding(id: number, element: number)


.decl initialisers(init: number, var: number, expr: number, location: number)


.decl deduction_guide_for_class(id: symbol, class_template: symbol)


.decl using_container(parent: symbol, child: symbol)


.decl sourcelocationprefix(prefix: symbol)


.decl coroutine_delete(function: symbol, delete: symbol)


.decl template_template_argument_value(type_id: symbol, index: symbol, arg_value: symbol)


.decl inmacroexpansion(id: symbol, inv: symbol)


.decl fun_decl_throws(fun_decl: symbol, index: symbol, type_id: symbol)


.decl var_specialized(id: symbol)


.decl routinetypeargs(routine: number, index: number, type_id: number)


.decl functions(id: number, name: symbol, kind: number)


.decl diagnostic_for(diagnostic: symbol, compilation: symbol, file_number: symbol, file_number_diagnostic_number: symbol)


.decl for_update(for_stmt: number, update_id: number)


.decl template_template_argument(type_id: symbol, index: symbol, arg_type: symbol)


.decl var_def(id: number)


.decl member(parent: number, index: number, child: number)


.decl numtemplatearguments(expr_id: symbol, num: symbol)


.decl type_mentions(id: number, type_id: number, location: number, kind: number)


.decl externaldata(id: symbol, path: symbol, column: symbol, value: symbol)


.decl switch_case(switch_stmt: symbol, index: symbol, case_id: symbol)


.decl params(id: number, function: number, index: number, type_id: number)


.decl namespace_decls(id: symbol, namespace_id: symbol, location: symbol, bodylocation: symbol)


.decl type_is_vla(type_id: symbol)


.decl usings(id: symbol, element_id: symbol, location: symbol, kind: symbol)


.decl is_complete(id: number)


.decl fun_def(id: number)


.decl exprparents(expr_id: number, child_index: number, parent_id: number)


.decl macrolocationbind(id: symbol, location: symbol)


.decl function_entry_point(id: number, entry_point: number)


.decl pointerishsize(id: number, size: number, alignment: number)


.decl for_body(for_stmt: number, body_id: number)


.decl link_parent(element: number, link_target: number)


.decl variable_template_argument_value(variable_id: symbol, index: symbol, arg_value: symbol)


.decl bitfield(id: symbol, bits: symbol, declared_bits: symbol)


.decl compilations(id: number, cwd: symbol)


.decl preprocdirects(id: symbol, kind: symbol, location: symbol)


.decl fun_decl_empty_throws(fun_decl: number)


.decl concept_templates(concept_id: symbol, name: symbol, location: symbol)


.decl for_condition(for_stmt: number, condition_id: number)


.decl is_structured_binding(id: symbol)


.decl if_else(if_stmt: number, else_id: number)


.decl condition_decl_bind(expr: symbol, decl: symbol)


.decl constexpr_if_then(constexpr_if_stmt: symbol, then_id: symbol)


.decl expr_cond_guard(cond: symbol, guard: symbol)


.decl coroutine(function: symbol, traits: symbol)


.decl purefunctions(id: symbol)


.decl derivedtypes(id: number, name: symbol, kind: number, type_id: number)


.decl compilation_build_mode(id: symbol, mode: symbol)


.decl expr_types(id: number, typeid: number, value_category: number)


.decl exprconv(converted: number, conversion: number)


.decl mangled_name(id: number, mangled_name: number, is_complete: symbol)


.decl valuetext(id: number, text: number)


.decl usertype_final(id: symbol)


.decl usertypes(id: number, name: symbol, kind: number)


.decl coroutine_new(function: symbol, new: symbol)


.decl switch_body(switch_stmt: symbol, body_id: symbol)


.decl function_template_argument(function_id: symbol, index: symbol, arg_type: symbol)


.decl lambdas(expr: symbol, default_capture: symbol, has_explicit_return_type: symbol, has_explicit_parameter_list: symbol)


.decl typeid_bind(expr: symbol, type_id: symbol)


.decl overrides(new: symbol, old: symbol)


.decl values(id: number, str: number)


.decl concept_template_argument_value(concept_id: symbol, index: symbol, arg_value: symbol)


.decl macroinvocations(id: symbol, macro_id: symbol, location: symbol, kind: symbol)


.decl conversionkinds(expr_id: number, kind: number)


.decl attributes(id: symbol, kind: symbol, name: symbol, name_space: symbol, location: symbol)


.decl attribute_arg_type(arg: symbol, type_id: symbol)


