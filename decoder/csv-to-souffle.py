#!/usr/bin/env python3

import csv
import re
import argparse
from pathlib import Path
import logging
from typing import Optional

logger = logging.getLogger(__name__)


def setup_logging():
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(
        logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    )
    logging.basicConfig(level=logging.INFO, handlers=[console_handler])


def transform_column_name(col: str) -> str:
    """转换列名为Soufflé兼容的格式"""
    # 移除"ID of "前缀
    col = re.sub(r"^ID of ", "", col)
    # 移除尾部下划线
    col = col.rstrip("_")
    # 将空格和特殊字符转换为下划线
    col = re.sub(r"[^a-zA-Z0-9_]", "_", col)
    # 确保以字母开头
    if col and not col[0].isalpha():
        col = "col_" + col
    return col.lower()


def infer_column_type(values: list) -> str:
    """推断列的数据类型"""
    if not values:
        return "symbol"

    float_count = 0
    number_count = 0

    for value in values:
        if not value or not value.strip():
            continue

        # 检查是否为浮点数
        try:
            float(value)
            str_val = str(value)
            if '.' in str_val:
                float_count += 1
            else:
                number_count += 1
        except ValueError:
            pass

    if float_count > 0:
        return "float"
    elif number_count > 0:
        return "number"
    else:
        return "symbol"


def csv_to_souffle(csv_dir: Path, output_file: Path, prefix: Optional[str] = None):
    """将CSV目录中的所有CSV文件转换为单个Soufflé .dl文件"""
    logger.info(f"Converting CSV files from {csv_dir} to Soufflé .dl file: {output_file}")

    # 获取所有CSV文件
    csv_files = list(csv_dir.glob("*.csv"))

    if not csv_files:
        logger.warning(f"No CSV files found in directory: {csv_dir}")
        return

    with open(output_file, "w", encoding="utf-8") as f_out:
        # 写入文件头
        f_out.write("// Soufflé datalog file generated from CSV files\n")
        f_out.write("// Auto-generated by csv-to-souffle.py\n\n")

        for csv_file in csv_files:
            relation_name = csv_file.stem.rstrip("_")
            if prefix:
                relation_name = f"{prefix}_{relation_name}"

            with open(csv_file, "r", encoding="utf-8") as f_in:
                reader = csv.reader(f_in)

                # 读取CSV头部获取列名
                try:
                    columns = next(reader)
                except StopIteration:
                    logger.warning(f"Empty CSV file: {csv_file}")
                    continue

                # 检查是否有事实数据
                row_count = 0
                for row in reader:
                    if len(row) == len(columns):
                        row_count += 1
                        if row_count >= 1:  # 只要找到至少一行数据就跳出循环
                            break

                # 如果没有事实数据，跳过这个关系
                if row_count == 0:
                    logger.info(f"Skipping relation {relation_name} - no facts found")
                    continue

                # 重置文件指针并重新读取头部
                f_in.seek(0)
                next(reader)  # 跳过头部

                # 转换列名为Soufflé兼容格式
                transformed_columns = [transform_column_name(col) for col in columns]

                # 收集样本数据用于类型推断
                sample_data = [[] for _ in range(len(columns))]
                sample_rows = []

                for row in reader:
                    if len(row) == len(columns):
                        sample_rows.append(row)
                        for i, value in enumerate(row):
                            if i < len(sample_data):
                                sample_data[i].append(value)
                        if len(sample_rows) >= 100:  # 最多采样100行
                            break

                # 推断列类型
                column_types = []
                for i, values in enumerate(sample_data):
                    col_type = infer_column_type(values)
                    column_types.append(col_type)

                # 再次重置文件指针准备写入事实数据
                f_in.seek(0)
                next(reader)  # 跳过头部

                # 写入关系声明
                param_decls = []
                for i, (col_name, col_type) in enumerate(zip(transformed_columns, column_types)):
                    param_decls.append(f"{col_name}: {col_type}")

                f_out.write(f".decl {relation_name}({', '.join(param_decls)})\n")
                # f_out.write(f".input {relation_name}\n")

                # 再次重置文件指针并写入事实数据
                f_in.seek(0)
                next(reader)  # 跳过头部

                row_count = 0
                for row in reader:
                    if len(row) == len(columns):
                        # 转义特殊字符并格式化输出
                        formatted_row = []
                        for i, value in enumerate(row):
                            if value and value.strip():
                                if column_types[i] == "symbol":
                                    # 转义引号和反斜杠
                                    escaped_value = value.replace("\\", "\\\\").replace('"', '\\"')
                                    formatted_row.append(f'"{escaped_value}"')
                                else:
                                    formatted_row.append(value)
                            else:
                                formatted_row.append('""' if column_types[i] == "symbol" else "0")

                        f_out.write(f"{relation_name}({', '.join(formatted_row)}).\n")
                        row_count += 1

                logger.info(f"Added relation {relation_name} with {row_count} facts")
                f_out.write("\n\n")


def main():
    parser = argparse.ArgumentParser(description="Convert CSV files to Soufflé .dl file")
    parser.add_argument("--csv", type=Path, required=True, help="Input directory containing CSV files")
    parser.add_argument("--output", type=Path, required=True, help="Output .dl file path")
    parser.add_argument("--prefix", type=str, default="", help="Prefix for all relation names")

    args = parser.parse_args()
    setup_logging()

    # 检查CSV目录是否存在
    if not args.csv.exists() or not args.csv.is_dir():
        logger.error(f"CSV directory not found: {args.csv}")
        exit(1)

    csv_to_souffle(args.csv, args.output, args.prefix)
    logger.info("CSV to Soufflé .dl conversion completed successfully")


if __name__ == "__main__":
    main()
